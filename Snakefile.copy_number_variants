genome_prefix=config["genome_prefix"]

project_main = config["project_dir"]
project_genome = "/".join((project_main, config["genome_dir"], genome_prefix))
project_genome_chroms = "/".join((project_main,
                                  config["genome_dir"],
                                  config["genome_chrom_dir"]))
project_samples = "/".join((project_main, config["samples_dir"]))

results_cnv_dir = "/".join((project_main, config["result_cnv_dir"]))

project_logs = "/".join((project_main, "logs"))

threads_max = config["threads_max"]
memory_max = config["memory_max"]
memory_min = config["memory_min"]

delly_types=config["delly"]["sv_types"]


def read_samples_names(directory):
    (dirs, ) = glob_wildcards(directory + "/{dir, [\d\w]+}")
    dirs = [ele for ele in dirs if "/" not in ele]
    return sorted(dirs)

samples_names = read_samples_names(project_samples)
#samples_names = ["CFA_222", "CFA_246", "CFA_606"]

print("{} samples loaded".format(len(samples_names)))
print(*samples_names, sep=", ")

from csv import reader

def read_csvc_samples_names(file_name, samples_names):
    control = []
    case = []
    with open(file_name, "r") as input_file:
        input_reader = reader(input_file, delimiter="\t")
        for name, group in input_reader:
            if name not in samples_names:
                continue

            if group == "case":
                case.append(name)
            else:
                control.append(name)
    return case, control


case_samples_names, control_samples_names = read_csvc_samples_names(config["cnmops"]["groups_file"], samples_names)

print("Picked {} samples for case and {} for control:".format(len(case_samples_names),
                                                              len(control_samples_names)))
print("Case:", ", ".join(case_samples_names))
print("Control:", ", ".join(control_samples_names))


def read_heterosomes_ploidy(file_name):
    result = {}
    with open(file_name, "r") as input_file:
        for line in input_file:
            sample, ploidy = line.rstrip().split()
            result[sample] = int(ploidy)
    return result


heterosomes_ploidy = read_heterosomes_ploidy(config["heterosomes_ploidy"])


print("{} samples loaded with different ploidy".format(len(heterosomes_ploidy)))
print(*["{}={}".format(name, heterosomes_ploidy.get(name, 2))
        for name in samples_names], sep = ", ")


rule cnvnator_create_root_files:
    input:
        bam="{project_samples}/{sample}/{sample}.bam",
        bai="{project_samples}/{sample}/{sample}.bam.bai"
    output:
        root="{project_samples}/{sample}/cnvs/cnvnator/{sample}.init.{bin_size}.root"
    log:
        stderr="{project_samples}/{sample}/cnvs/cnvnator/logs/{sample}.CNVnator.{bin_size}.CreateRoot.err",
        stdout="{project_samples}/{sample}/cnvs/cnvnator/logs/{sample}.CNVnator.{bin_size}.CreateRoor.log"
    threads: 2
    resources:
        mem_mb=memory_min * 2
    shell:
        "(cnvnator -root {output.root} -tree {input.bam} -lite > {log.stdout}) 2> {log.stderr}"


rule cnvnator_generate_histogram:
    input:
        root=rules.cnvnator_create_root_files.output.root
    output:
        root="{project_samples}/{sample}/cnvs/cnvnator/{sample}.his.{bin_size}.root"
    log:
        stderr="{project_samples}/{sample}/cnvs/cnvnator/logs/{sample}.CNVnator.{bin_size}.GenerateHistogram.err",
        stdout="{project_samples}/{sample}/cnvs/cnvnator/logs/{sample}.CNVnator.{bin_size}.GenerateHistogram.log"
    threads: 1
    resources:
        mem_mb=memory_min
    params:
        chroms=project_genome_chroms
    shell:
        "cp {input.root} {output.root} && \
        (cnvnator -root {output.root} -his {wildcards.bin_size} -d {params.chroms} > {log.stdout}) 2> {log.stderr}"


rule cnvnator_calculate_statistics:
    input:
        root=rules.cnvnator_generate_histogram.output.root
    output:
        root="{project_samples}/{sample}/cnvs/cnvnator/{sample}.stat.{bin_size}.root"
    log:
        stderr="{project_samples}/{sample}/cnvs/cnvnator/logs/{sample}.CNVnator.{bin_size}.CalculateStatistics.err",
        stdout="{project_samples}/{sample}/cnvs/cnvnator/logs/{sample}.CNVnator.{bin_size}.CalculateStatistics.log"
    threads: 1
    resources:
        mem_mb=memory_min
    params:
        chroms=project_genome_chroms
    shell:
        "cp {input.root} {output.root} && \
        (cnvnator -root {output.root} -stat {wildcards.bin_size} -d {params.chroms} > {log.stdout}) 2> {log.stderr}"


rule cnvnator_signal_partitioning:
    input:
        root=rules.cnvnator_calculate_statistics.output.root
    output:
        root="{project_samples}/{sample}/cnvs/cnvnator/{sample}.part.{bin_size}.root"
    log:
        stderr="{project_samples}/{sample}/cnvs/cnvnator/logs/{sample}.CNVnator.{bin_size}.SignalPartitioning.err",
        stdout="{project_samples}/{sample}/cnvs/cnvnator/logs/{sample}.CNVnator.{bin_size}.SignalPartitioning.log"
    threads: 1
    resources:
        mem_mb=memory_min
    params:
#        bin_size=config["cnvnator_bin_size"],
        chroms=project_genome_chroms
    shell:
        "cp {input.root} {output.root} && \
        (cnvnator -root {output.root} -partition {wildcards.bin_size} -d {params.chroms} > {log.stdout}) 2> {log.stderr}"


rule cnvnator_call_cnvs:
    input:
        root=rules.cnvnator_signal_partitioning.output.root
    output:
        tsv=protected("{project_samples}/{sample}/cnvs/cnvnator/{sample}.cnvnator.{bin_size}.tsv")
    log:
        stderr="{project_samples}/{sample}/cnvs/cnvnator/logs/{sample}.CNVnator.{bin_size}.CallCNVs.err",
    threads: 1
    resources:
        mem_mb=memory_min
    params:
#        bin_size=config["cnvnator_bin_size"],
        chroms=project_genome_chroms
    shell:
        "(cnvnator -root {input.root} -call {wildcards.bin_size} -d {params.chroms} > {output.tsv}) 2> {log.stderr}"


rule call_cnvnator:
    input:
        expand("{project_samples}/{sample}/cnvs/cnvnator/{sample}.cnvnator.{bin_size}.tsv",
               zip,
               project_samples=[project_samples, ]*len(samples_names),
               bin_size=[config["cnvnator"]["bin_size"], ] * len(samples_names),
               sample=sorted(samples_names))


rule delly_call_sample_sv:
    input:
        bam="{project_samples}/{sample}/{sample}.bam",
        bai="{project_samples}/{sample}/{sample}.bam.bai",
        fasta=project_genome + ".fa"
    output:
        bcf="{project_samples}/{sample}/cnvs/delly/{sample}.delly.{delly_type}.call.bcf"
    log:
        stderr="{project_samples}/{sample}/cnvs/cnvnator/logs/{sample}.DELLY.CallSample.{delly_type}.err",
        stdout="{project_samples}/{sample}/cnvs/cnvnator/logs/{sample}.DELLY.CallSample.{delly_type}.log"
    threads: 1
    resources:
        mem_mb=memory_min
    shell:
        "(delly call -t {wildcards.delly_type} -g {input.fasta} -o {output.bcf} {input.bam} > {log.stdout}) 2> {log.stderr}"


rule delly_collect_sample_sv_calls:
    input:
        bcfs=expand("{project_samples}/{sample}/cnvs/delly/{sample}.delly.{{delly_type}}.call.bcf",
                        zip,
                        project_samples=[project_samples, ]*len(samples_names),
                        sample=sorted(samples_names)
                       ),


rule delly_merge_sv_samples_call:
    input:
        bcfs=rules.delly_collect_sample_sv_calls.input.bcfs
    output:
        bcf="{results_cnv_dir}/delly/delly.{delly_type}.sites.bcf"
    log:
        stderr="{results_cnv_dir}/delly/logs/DELLY.MergeSamplesCall.{delly_type}.err",
        stdout="{results_cnv_dir}/delly/logs/DELLY.MergeSamplesCall.{delly_type}.log",
    threads: 4
    resources:
        mem_mb=memory_min * 4
    shell:
        "(delly merge -o {output.bcf} {input.bcfs} > {log.stdout}) 2> {log.stderr}"


rule delly_genotype_samples:
    input:
        bcfs=rules.delly_call_sample_sv.output.bcf,
        merged=expand("{results_cnv_dir}/delly/delly.{{delly_type}}.sites.bcf",
                      results_cnv_dir=results_cnv_dir),
        bam="{project_samples}/{sample}/{sample}.bam",
        bai="{project_samples}/{sample}/{sample}.bam.bai",
        fasta=project_genome + ".fa"
    output:
        bcf="{project_samples}/{sample}/cnvs/delly/{sample}.delly.{delly_type}.genotyped.bcf"
    log:
        stderr="{project_samples}/{sample}/cnvs/cnvnator/logs/{sample}.DELLY.GenotypeSample.{delly_type}.err",
        stdout="{project_samples}/{sample}/cnvs/cnvnator/logs/{sample}.DELLY.GenotypeSample.{delly_type}.log"
    threads: 1
    resources:
        mem_mb=memory_min
    shell:
        "(delly call -t {wildcards.delly_type} -g {input.fasta} -v {input.merged} -o {output.bcf} {input.bam} > {log.stdout}) 2> {log.stderr}"


rule delly_collect_sample_sv_genotypes:
    input:
        bcfs=expand("{project_samples}/{sample}/cnvs/delly/{sample}.delly.{{delly_type}}.genotyped.bcf",
                    zip,
                    project_samples=[project_samples, ]*len(samples_names),
                    sample=sorted(samples_names)
                    ),


rule delly_merge_sv_samples_genotype:
    input:
        bcfs=rules.delly_collect_sample_sv_genotypes.input.bcfs
    output:
        bcf="{results_cnv_dir}/delly/delly.{delly_type}.genotypes.bcf"
    log:
        stderr="{results_cnv_dir}/delly/logs/DELLY.MergeSamplesGenotype.{delly_type}.err",
        stdout="{results_cnv_dir}/delly/logs/DELLY.MergeSamplesgenotype.{delly_type}.log",
    threads: 4
    resources:
        mem_mb=memory_min * 4
    shell:
        "(bcftools merge -m id -O b -o {output.bcf} {input.bcfs} > {log.stdout}) 2> {log.stderr}"


rule delly_index_sv_samples_genotype:
    input:
        bcf=rules.delly_merge_sv_samples_genotype.output.bcf,
    output:
        csi="{results_cnv_dir}/delly/delly.{delly_type}.genotypes.bcf.csi"
    log:
        stderr="{results_cnv_dir}/delly/logs/DELLY.IndexSamplesGenotype.{delly_type}.err",
        stdout="{results_cnv_dir}/delly/logs/DELLY.IndexSamplesgenotype.{delly_type}.log",
    threads: 4
    resources:
        mem_mb=memory_min * 4
    shell:
        "(bcftools index -o {output.csi} {input.bcf} > {log.stdout}) 2> {log.stderr}"


rule delly_filter_svs:
    input:
        bcf=rules.delly_merge_sv_samples_genotype.output.bcf,
        csi=rules.delly_index_sv_samples_genotype.output.csi
    output:
        bcf="{results_cnv_dir}/delly/delly.{delly_type}.filtered.bcf"
    log:
        stderr="{results_cnv_dir}/delly/logs/DELLY.FilterSVs.{delly_type}.err",
        stdout="{results_cnv_dir}/delly/logs/DELLY.FilterSVs.{delly_type}.log",
    threads: 4
    resources:
        mem_mb=memory_min * 4
    shell:
        "(delly filter -f germline -o {output.bcf} {input.bcf} > {log.stdout}) 2> {log.stderr}"


rule call_delly:
    input:
        expand("{results_cnv_dir}/delly/delly.{delly_type}.filtered.bcf",
               results_cnv_dir=[results_cnv_dir] * len(delly_types),
               delly_type=delly_types),


cnmops_intervals = list(range(0,17)) + [32, 64, 128]


rule cnmops_standard:
    input:
        bam=expand("{project_samples}/{sample}/{sample}.bam",
                   zip,
                   project_samples=[project_samples, ]*len(samples_names),
                   sample=samples_names
                  ),
        bai=expand("{project_samples}/{sample}/{sample}.bam.bai",
                   zip,
                   project_samples=[project_samples, ]*len(samples_names),
                   sample=samples_names
                  ),
    params:
        sampleNames=samples_names,
        autosomes=[str(ele) for ele in range(1, 39)],
        heterosomes=["X"],
        ploidy=[heterosomes_ploidy.get(name, 2) for name in samples_names],
        classes=["CN{}".format(ele) for ele in cnmops_intervals],
        foldChange=[ele/2.0 if ele != 0.0 else 0.025 for ele in cnmops_intervals],
        segAlgorithm=config["cnmops"]["segAlgorithm"],
        WL=config["cnmops"]["WL"],
        returnPosterior=config["cnmops"]["returnPosterior"],
    threads: threads_max
    resources:
        mem_mb=memory_max
    output:
        cnvs_autosomes="{results_cnv_dir}/cn.mops/cnmops.autosomes.cnvs",
        cnvr_autosomes="{results_cnv_dir}/cn.mops/cnmops.autosomes.cnvr",
        cnvs_heterosomes="{results_cnv_dir}/cn.mops/cnmops.heterosomes.cnvs",
        cnvr_heterosomes="{results_cnv_dir}/cn.mops/cnmops.heterosomes.cnvr",
    script:
        config["cnmops"]["script_standard"]


rule cnmops_cvsc:
    input:
        case_bam=expand("{project_samples}/{sample}/{sample}.bam", zip,
                        project_samples=[project_samples, ]*len(samples_names),
                        sample=case_samples_names
                       ),
        case_bai=expand("{project_samples}/{sample}/{sample}.bam.bai", zip,
                        project_samples=[project_samples, ]*len(samples_names),
                        sample=case_samples_names
                       ),
        control_bam=expand("{project_samples}/{sample}/{sample}.bam", zip,
                           project_samples=[project_samples, ]*len(samples_names),
                           sample=control_samples_names
                          ),
        control_bai=expand("{project_samples}/{sample}/{sample}.bam.bai", zip,
                           project_samples=[project_samples, ]*len(samples_names),
                           sample=control_samples_names
                          ),
    params:
        ControlSampleNames=control_samples_names,
        CaseSampleNames=case_samples_names,
        autosomes=[str(ele) for ele in range(1, 39)],
        heterosomes=["X"],
        ploidy=[heterosomes_ploidy.get(name, 2) for name in samples_names],
        classes=["CN{}".format(ele) for ele in cnmops_intervals],
        foldChange=[ele/2.0 if ele != 0.0 else 0.025 for ele in cnmops_intervals],
        segAlgorithm=config["cnmops"]["segAlgorithm"],
        WL=config["cnmops"]["WL"],
        returnPosterior=config["cnmops"]["returnPosterior"],
    threads: threads_max
    resources:
        mem_mb=memory_max
    output:
        cnvs_autosomes="{results_cnv_dir}/cn.mops/cnmops.cvsc.autosomes.cnvs",
        cnvr_autosomes="{results_cnv_dir}/cn.mops/cnmops.cvsc.autosomes.cnvr",
        cnvs_heterosomes="{results_cnv_dir}/cn.mops/cnmops.cvsc.heterosomes.cnvs",
        cnvr_heterosomes="{results_cnv_dir}/cn.mops/cnmops.cvsc.heterosomes.cnvr",
    script:
        config["cnmops"]["script_standard"]


rule call_cnmops_standard:
    input:
        expand("{results_cnv_dir}/cn.mops/cnmops.{chromosomes}.{result}",
               results_cnv_dir=[results_cnv_dir],
               chromosomes=["autosomes", "heterosomes"],
               result=["cnvs", "cnvr"]
              ),


rule call_cnmops_cvsc:
    input:
        expand("{results_cnv_dir}/cn.mops/cnmops.cvsc.{chromosomes}.{result}",
               results_cnv_dir=[results_cnv_dir],
               chromosomes=["autosomes", "heterosomes"],
               result=["cnvs", "cnvr"]
              ),


rule call_cnvs:
    input:
        cnvnator=rules.call_cnvnator.input,
        delly=rules.call_delly.input,
        cnmops_standard=rules.call_cnmops_standard.input,
